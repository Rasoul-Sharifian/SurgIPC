clc
clear
close all
addpath('util');

img_num2 = 141;% 141 500
data_name = '82_141';%'20240103_105256' '20240103_2'
lambda_flat = 981;
th = 11.5;
%% Without IPC
for img_num1 = 82;%82 500
main_path = ['Keypoints_Match_SPSG/' data_name '/Ablation'];

kpts0 = load([main_path num2str(img_num2) '_' num2str(img_num1) '_keypoints0.mat']);
kpts1 = load([main_path num2str(img_num2) '_' num2str(img_num1) '_keypoints1.mat']);
matches = load([main_path num2str(img_num2) '_' num2str(img_num1) '_matches' '.mat']);

valid = matches.matches > -1;

points_selected_ref = kpts0.keypoints0(valid,:);
points_selected_other_view = kpts1.keypoints1(matches.matches(valid)+1,:);

img_ref_path = ['../1_DataPreparation/' data_name '/Color' '/color_frame_' num2str(img_num1) '.png'];
I_ref = imread(img_ref_path);

img_other_view_path = ['../1_DataPreparation/' data_name '/Color' '/color_frame_' num2str(img_num2) '.png'];
I_other_view = imread(img_other_view_path);

%pose path 
T_ref = load(['PoseEstimation/posesPath/color_frame_' num2str(img_num1) '.mat']);
T_oth = load(['PoseEstimation/posesPath/color_frame_' num2str(img_num2) '.mat']);

path_depth1 = ['../1_DataPreparation/' data_name '/Depth/depth_frame_' num2str(img_num2) '.png'];
d_I1 = imread(path_depth1);
d_I1 = double(d_I1);

% Camera parameters
fx = 4.17368e+02;
fy = 4.17368e+02;
cx = 4.23688e+02;
cy = 2.46202e+02;
K = [fx 0 cx; 0 fy cy; 0 0 1];

% Display the montage
montageSideBySide = cat(2, I_other_view, I_ref);
f1 = figure(10);
imshow(montageSideBySide);
axesHandle1 = gca(f1);
hold (axesHandle1 , 'on');

% Plot matched points on both images
numMatches = size(points_selected_other_view, 1);
% colors = lines(numMatches); % Generate distinct colors for each match
nmb_cr_match_wipc = 0;
for i = 1:1:numMatches
    x1 = points_selected_other_view(i,1);
    y1 = points_selected_other_view(i,2);
    % depth of related pixels
    depth = d_I1(round(y1),round(x1)) * .1;
    %% De_Projection from other view to ref
    Pc = depth * inv(K) * [x1,y1,1]';
    Mext = [T_oth.R T_oth.T;0 0 0 1];
    Pw_h = inv(Mext) * [Pc;1];
    
    %% Projection to ref view
    K=[fx 0 cx; 0 fy cy; 0 0 1];
    P = K * [T_ref.R T_ref.T] * Pw_h;
    Pn = P/P(3);
    
    x2 = points_selected_ref(i,1);
    y2 = points_selected_ref(i,2);
    dist_ = sqrt((x2 - Pn(1)).^2 + (y2 - Pn(2)).^2);

    if dist_ < th
        nmb_cr_match_wipc = nmb_cr_match_wipc + 1;
        x2 = points_selected_ref(i,1) + size(I_other_view, 2);
        plot(axesHandle1, [x1, x2], [y1, y2], 'Color', [0 1 0], 'LineWidth', 1);
        plot(axesHandle1, x1, y1, 'go', 'MarkerSize', 3, 'LineWidth', 1.2);
        plot(axesHandle1, x2, y2, 'go', 'MarkerSize', 3, 'LineWidth', 1.2);
    else
        x2 = points_selected_ref(i,1) + size(I_other_view, 2);
        plot(axesHandle1, [x1, x2], [y1, y2], 'Color', [1 0 0], 'LineWidth', 1);
        plot(axesHandle1, x1, y1, 'ro', 'MarkerSize', 3, 'LineWidth', 1.2);
        plot(axesHandle1, x2, y2, 'ro', 'MarkerSize', 3, 'LineWidth', 1.2);
    end
end

title(axesHandle1, 'Matched Points without IPC');
hold off;

%% IPC in Flat domain
main_path = ['/media/rasoul/830873c3-8201-4a0c-8abe-39d71bdf67d7/Flattening/SuperGluePretrainedNetwork-master_paper/' ...
    'dump_match_pairs/IPC' data_name '/Ablation_' num2str(lambda_flat) '_'];

kpts0_IPC = load([main_path num2str(img_num2) '_' num2str(img_num1) '_keypoints0.mat']);
kpts1_IPC = load([main_path num2str(img_num2) '_' num2str(img_num1) '_keypoints1.mat']);
matches_IPC = load([main_path num2str(img_num2) '_' num2str(img_num1) '_matches' '.mat']);

valid_IPC = matches_IPC.matches > -1;

points_selected_ref_IPC = kpts0_IPC.keypoints0(valid_IPC,:);

points_selected_other_view_IPC = kpts1_IPC.keypoints1(matches_IPC.matches(valid_IPC)+1,:);

img_ref_path_IPC = ['../4_Warping/'...
    data_name '/img_flat_gs15/Frame_' num2str(img_num1) '/lambda' num2str(lambda_flat) '.png'];
I_ref_IPC = imread(img_ref_path_IPC);

img_other_view_path_IPC = ['../4_Warping/'...
    data_name '/img_flat_gs15/Frame_' num2str(img_num2) '/lambda' num2str(lambda_flat) '.png'];
I_other_view_IPC = imread(img_other_view_path_IPC);

convex = 1;
lambda_nonconvex = [];

other_view_frame_nb = img_num2;
frompixel_wp_other_view = from_warped_to_original_matching_vlfeet(data_name, points_selected_other_view_IPC, main_path, ...
    other_view_frame_nb, lambda_flat, convex, lambda_nonconvex);

ref_frame_nb = img_num1;
frompixel_wp_ref = from_warped_to_original_matching_vlfeet(data_name, points_selected_ref_IPC, main_path, ...
    ref_frame_nb, lambda_flat, convex, lambda_nonconvex);

%% Display IPC in Warp domain
montageSideBySide = cat(2, I_other_view_IPC, I_ref_IPC);
f1 = figure(11);
imshow(montageSideBySide);
axesHandle1 = gca(f1);
hold (axesHandle1 , 'on');

% Plot matched points on both images
numMatches = size(points_selected_other_view_IPC, 1);
colors = lines(numMatches); % Generate distinct colors for each match

for i = 1:1:numMatches

    x1_ = frompixel_wp_other_view(i,1);
    y1_ = frompixel_wp_other_view(i,2);

  % depth of related pixels
    depth = d_I1(round(y1_),round(x1_)) * .1;
    %% De_Projection from other view to ref
    Pc = depth * inv(K) * [x1_,y1_,1]';
    Mext = [T_oth.R T_oth.T;0 0 0 1];
    Pw_h = inv(Mext) * [Pc;1];

    %% Projection to ref view
    K=[fx 0 cx; 0 fy cy; 0 0 1];
    P = K * [T_ref.R T_ref.T] * Pw_h;
    Pn = P/P(3);

    x2_ = frompixel_wp_ref(i,1);
    y2_ = frompixel_wp_ref(i,2);

    dist_ = sqrt((x2_ - Pn(1)).^2 + (y2_ - Pn(2)).^2);

    if dist_ < th
        x1 = points_selected_other_view_IPC(i,1);
        y1 = points_selected_other_view_IPC(i,2);
        x2 = points_selected_ref_IPC(i,1) + size(I_other_view, 2);
        y2 = points_selected_ref_IPC(i,2);
        plot(axesHandle1, [x1, x2], [y1, y2], 'Color', [0 1 0], 'LineWidth', 1);
        plot(axesHandle1, x1, y1, 'go', 'MarkerSize', 3, 'LineWidth', 1.2);
        plot(axesHandle1, x2, y2, 'go', 'MarkerSize', 3, 'LineWidth', 1.2);
    else
        x1 = points_selected_other_view_IPC(i,1);
        y1 = points_selected_other_view_IPC(i,2);
        x2 = points_selected_ref_IPC(i,1) + size(I_other_view, 2);
        y2 = points_selected_ref_IPC(i,2);
        plot(axesHandle1, [x1, x2], [y1, y2], 'Color', [1 0 0], 'LineWidth', 1);
        plot(axesHandle1, x1, y1, 'ro', 'MarkerSize', 3, 'LineWidth', 1.2);
        plot(axesHandle1, x2, y2, 'ro', 'MarkerSize', 3, 'LineWidth', 1.2);
    end

end

k = 0

%% Display IPC in Original domain

% Display the montage
montageSideBySide = cat(2, I_other_view, I_ref);
f1 = figure(14);
imshow(montageSideBySide);
axesHandle1 = gca(f1);
hold (axesHandle1 , 'on');

% Plot matched points on both images
numMatches = size(points_selected_other_view_IPC, 1);
colors = lines(numMatches); % Generate distinct colors for each match
nmb_cr_match_ipc = 0;

for i = 1:1:numMatches
    x1 = frompixel_wp_other_view(i,1);
    y1 = frompixel_wp_other_view(i,2);

  % depth of related pixels
    depth = d_I1(round(y1),round(x1)) * .1;
    %% De_Projection from other view to ref
    Pc = depth * inv(K) * [x1,y1,1]';
    Mext = [T_oth.R T_oth.T;0 0 0 1];
    Pw_h = inv(Mext) * [Pc;1];

    %% Projection to ref view
    K=[fx 0 cx; 0 fy cy; 0 0 1];
    P = K * [T_ref.R T_ref.T] * Pw_h;
    Pn = P/P(3);

    x2 = frompixel_wp_ref(i,1);
    y2 = frompixel_wp_ref(i,2);

    dist_ = sqrt((x2 - Pn(1)).^2 + (y2 - Pn(2)).^2);

    if dist_ < th
        nmb_cr_match_ipc = nmb_cr_match_ipc + 1;
        x2 = frompixel_wp_ref(i,1) + size(I_other_view, 2);

        plot(axesHandle1, [x1, x2], [y1, y2], 'Color', [0 1 0], 'LineWidth', 1);
        plot(axesHandle1, x1, y1, 'go', 'MarkerSize', 3, 'LineWidth', 1.2);
        plot(axesHandle1, x2, y2, 'go', 'MarkerSize', 3, 'LineWidth', 1.2);
    else
        x2 = frompixel_wp_ref(i,1) + size(I_other_view, 2);
        plot(axesHandle1, [x1, x2], [y1, y2], 'Color', [1 0 0], 'LineWidth', 1);
        plot(axesHandle1, x1, y1, 'ro', 'MarkerSize', 3, 'LineWidth', 1.2);
        plot(axesHandle1, x2, y2, 'ro', 'MarkerSize', 3, 'LineWidth', 1.2);
    end

end
numMatches
nmb_cr_match_ipc
end